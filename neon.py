# neon.py
from __future__ import annotations
import os
import asyncio
import contextlib
import time
from datetime import datetime, timedelta, timezone
from typing import Any, Dict, Optional, Tuple, List, Set

from aiogram import F, BaseMiddleware
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton

# ===================== ENV / CONST =====================
NEON_SESSION_TIMEOUT_SEC = int(os.getenv("NEON_SESSION_TIMEOUT_SEC", "900"))       # 15 –º–∏–Ω ‚Äî —Ç–∞–π–º–∞—É—Ç —Å–µ—Å—Å–∏–∏
NEON_ANALYSIS_DAILY_LIMIT = int(os.getenv("NEON_ANALYSIS_DAILY_LIMIT", "5"))       # 5 –∞–Ω–∞–ª–∏–∑–æ–≤/—Å—É—Ç–∫–∏
NEON_MAX_LIST_SHOW = int(os.getenv("NEON_MAX_LIST_SHOW", "50"))                    # –º–∞–∫—Å–∏–º—É–º –∏–º—ë–Ω –≤ —Å–ø–∏—Å–∫–∞—Ö
NEON_NOTIFY_COOLDOWN_SEC = int(os.getenv("NEON_NOTIFY_COOLDOWN_SEC", "300"))       # –∞–Ω—Ç–∏—Å–ø–∞–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∞–¥–º–∏–Ω–∞–º (—Å–µ–∫)

# ===================== RUNTIME STATE =====================
_SESSIONS: Dict[int, Dict[str, float]] = {}     # user_id -> {"last": ts, "notified": ts}
_NEON_COIN_PENDING: Set[int] = set()            # –æ–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ —Ç–∏–∫–µ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º

# ===================== HELPERS =====================
def _now_utc() -> datetime:
    return datetime.now(timezone.utc)

def _user_display_name(app: Dict[str, Any], u: Any) -> str:
    f = app.get("user_display_name")
    if callable(f):
        try:
            return f(u)
        except Exception:
            pass
    if not u:
        return "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    if getattr(u, "username", None):
        return f"@{u.username}"
    fn = (getattr(u, "first_name", "") or "").strip()
    ln = (getattr(u, "last_name", "") or "").strip()
    return (fn + " " + ln).strip() or "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"

def _norm_token(txt: str) -> str:
    t = "".join(ch for ch in (txt or "") if ch.isalnum() or ch in "/").upper().strip()
    if t.endswith("USDT"):
        t = t[:-4]
    if "/" in t:
        t = t.split("/")[0]
    return t

def _resolve_symbol_any(app: Dict[str, Any], raw: str) -> Optional[str]:
    market = app.get("market")
    rsfq = app.get("resolve_symbol_from_query")
    if callable(rsfq):
        try:
            sym = rsfq(raw)
            if sym:
                return sym
        except Exception:
            pass
    token = _norm_token(raw)
    if not token or len(token) < 2:
        return None
    candidate = f"{token}/USDT"
    try:
        for name, ex in market._available_exchanges():
            resolved = market.resolve_symbol(ex, candidate) or None
            if resolved and resolved in ex.markets:
                return candidate
    except Exception:
        pass
    return candidate  # –ø–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–Ω—Å

async def _ensure_user_row_and_touch(app: Dict[str, Any], user_id: int) -> None:
    db = app.get("db")
    if not db or not getattr(db, "conn", None):
        return
    with contextlib.suppress(Exception):
        await db.get_user_state(user_id)
    try:
        await db.conn.execute("ALTER TABLE users ADD COLUMN last_seen TEXT")
        await db.conn.commit()
    except Exception:
        pass
    try:
        await db.conn.execute("UPDATE users SET last_seen=? WHERE user_id=?", (_now_utc().isoformat(), user_id))
        await db.conn.commit()
    except Exception:
        pass

async def _ensure_analysis_columns(app: Dict[str, Any]) -> None:
    db = app.get("db")
    if not db or not getattr(db, "conn", None):
        return
    for s in (
        "ALTER TABLE users ADD COLUMN analysis_count INTEGER NOT NULL DEFAULT 0",
        "ALTER TABLE users ADD COLUMN analysis_date TEXT",
    ):
        with contextlib.suppress(Exception):
            await db.conn.execute(s)
            await db.conn.commit()

def _today_key_msk(app: Dict[str, Any]) -> str:
    f = app.get("today_key")
    if callable(f):
        try:
            return f()
        except Exception:
            pass
    now = datetime.now(timezone.utc) + timedelta(hours=3)
    return now.strftime("%Y-%m-%d")

async def _analysis_allowed_and_inc(app: Dict[str, Any], user_id: int, st: Dict[str, Any]) -> Tuple[bool, int, int]:
    await _ensure_analysis_columns(app)
    db = app.get("db")
    if not db or not getattr(db, "conn", None):
        return False, 0, NEON_ANALYSIS_DAILY_LIMIT
    if bool(st.get("unlimited") or st.get("admin")):
        return True, 0, 0
    dkey = _today_key_msk(app)
    try:
        cur = await db.conn.execute("SELECT analysis_count, analysis_date FROM users WHERE user_id=?", (user_id,))
        row = await cur.fetchone()
        if not row:
            await db.get_user_state(user_id)
            cur = await db.conn.execute("SELECT analysis_count, analysis_date FROM users WHERE user_id=?", (user_id,))
            row = await cur.fetchone()
        cnt = int(row["analysis_count"] if row and row["analysis_count"] is not None else 0)
        date = str(row["analysis_date"] or "")
        if date != dkey:
            cnt = 0
        if cnt >= NEON_ANALYSIS_DAILY_LIMIT:
            return False, cnt, NEON_ANALYSIS_DAILY_LIMIT
        cnt2 = cnt + 1
        await db.conn.execute("UPDATE users SET analysis_count=?, analysis_date=? WHERE user_id=?", (cnt2, dkey, user_id))
        await db.conn.commit()
        return True, cnt2, NEON_ANALYSIS_DAILY_LIMIT
    except Exception:
        return False, 0, NEON_ANALYSIS_DAILY_LIMIT

def _format_brief_header(details: Dict[str, Any], base: str, side_score: Optional[float]) -> str:
    p_bayes = details.get("p_bayes")
    if isinstance(p_bayes, (int, float)):
        return f"üîé –ê–Ω–∞–ª–∏–∑ {base} ‚Ä¢ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ {details.get('side')} ‚Ä¢ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å {p_bayes:.2f}"
    if isinstance(side_score, (int, float)):
        return f"üîé –ê–Ω–∞–ª–∏–∑ {base} ‚Ä¢ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ {details.get('side')} ‚Ä¢ –æ—Ü–µ–Ω–∫–∞ {side_score:.2f}"
    return f"üîé –ê–Ω–∞–ª–∏–∑ {base} ‚Ä¢ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ {details.get('side')}"

def _safe_float(x, default=0.0) -> float:
    try:
        v = float(x)
        return v if (v == v) else float(default)
    except Exception:
        return float(default)

def _fmt_price(app: Dict[str, Any], x: float) -> str:
    f = app.get("format_price") or (lambda v: f"{v:.4f}")
    try:
        return f(float(x))
    except Exception:
        return f"{x:.4f}"

def _extract_news_tops(app: Dict[str, Any], note: str) -> List[str]:
    parser = app.get("_parse_news_note")
    if callable(parser):
        try:
            _neg, _pos, tops = parser(note)
            return tops or []
        except Exception:
            return []
    return []

def _pct_of_entry(side: str, entry: float, price: float) -> float:
    if not entry:
        return 0.0
    if side == "LONG":
        return (price - entry) / (entry + 1e-9) * 100.0
    else:
        return (entry - price) / (entry + 1e-9) * 100.0

def _make_pros_cons(details: Dict[str, Any]) -> Tuple[List[str], List[str]]:
    pros, cons = [], []
    if details.get("cond4h_up") and details.get("cond1h_up"):
        pros.append("–±—ã—á–∏–π MTF (4h/1h > EMA200)")
    elif details.get("cond4h_up") or details.get("cond1h_up"):
        pros.append("—Å–º–µ—à–∞–Ω–Ω—ã–π MTF (—á–∞—Å—Ç–∏—á–Ω–æ > EMA200)")
    else:
        cons.append("—Å–ª–∞–±—ã–π MTF (4h/1h < EMA200)")
    if details.get("cond15_up"):
        pros.append("15m EMA50 > EMA200 (–ø–æ–¥–¥–µ—Ä–∂–∫–∞ —Ç—Ä–µ–Ω–¥–∞)")
    st_dir = int(details.get("st_dir") or 0)
    pros.append("SuperTrend ‚Üë" if st_dir > 0 else ("SuperTrend ‚Üì" if st_dir < 0 else ""))
    bos_dir = int(details.get("bos_dir") or 0)
    if bos_dir == 1: pros.append("BOS‚Üë (–∑–∞ –ª–æ–Ω–≥)")
    if bos_dir == -1: cons.append("BOS‚Üì (–∑–∞ —à–æ—Ä—Ç)")
    if details.get("don_break_long"): pros.append("Donchian‚Üë")
    if details.get("don_break_short"): cons.append("Donchian‚Üì")
    adx = _safe_float(details.get("adx15"))
    if adx >= 50: pros.append(f"ADX {adx:.0f} ‚Äî —Å–∏–ª—å–Ω—ã–π —Ç—Ä–µ–Ω–¥")
    elif adx >= 25: pros.append(f"ADX {adx:.0f} ‚Äî —Ç—Ä–µ–Ω–¥–æ–≤—ã–π —Ä–µ–∂–∏–º")
    else: cons.append(f"ADX {adx:.0f} ‚Äî –±–æ–∫–æ–≤–æ–π/—Ä–≤–∞–Ω—ã–π —Ä–µ–∂–∏–º")
    rsi5 = _safe_float(details.get("rsi5"))
    macd_pos = (details.get("macdh5") or 0) > 0
    if rsi5 >= 70: cons.append(f"RSI(5m) {rsi5:.0f} ‚Äî –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç—å")
    elif rsi5 >= 55: pros.append(f"RSI(5m) {rsi5:.0f} ‚Äî —É–º–µ—Ä–µ–Ω–Ω–æ –±—ã—á–∏–π")
    elif rsi5 <= 45: cons.append(f"RSI(5m) {rsi5:.0f} ‚Äî —Å–ª–∞–±—ã–π –º–æ–º–µ–Ω—Ç—É–º")
    if macd_pos: pros.append("MACD + (–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏–º–ø—É–ª—å—Å–∞)")
    else: cons.append("MACD ‚àí (–∏–º–ø—É–ª—å—Å –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω)")
    rvol = details.get("rvol_combo")
    if isinstance(rvol, (int, float)):
        if rvol >= 1.5: pros.append(f"RVOL x{rvol:.2f} ‚Äî —Å–∏–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å")
        elif rvol >= 1.2: pros.append(f"RVOL x{rvol:.2f} ‚Äî –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å")
        elif rvol < 0.9: cons.append(f"RVOL x{rvol:.2f} ‚Äî –Ω–∏–∂–µ –Ω–æ—Ä–º—ã")
    vol_z = details.get("vol_z")
    if isinstance(vol_z, (int, float)):
        if vol_z > 1.0: pros.append(f"vol_z {vol_z:.2f} ‚Äî –≤—ã–¥–µ–ª—è–µ—Ç—Å—è –ø–æ –æ–±—ä—ë–º—É")
        elif vol_z < 0: cons.append(f"vol_z {vol_z:.2f} ‚Äî –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –Ω–∏–∂–µ –º–µ–¥–∏–∞–Ω—ã")
    cvd = details.get("cvd_slope")
    if isinstance(cvd, (int, float)):
        if cvd > 1e6: pros.append("CVD ‚Äî —Å–∏–ª—å–Ω–∞—è –∞–≥—Ä–µ—Å—Å–∏—è –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π")
        elif cvd < -1e6: cons.append("CVD ‚Äî —Å–∏–ª—å–Ω–∞—è –∞–≥—Ä–µ—Å—Å–∏—è –ø—Ä–æ–¥–∞–≤—Ü–æ–≤")
    l2 = details.get("ob_imb")
    if isinstance(l2, (int, float)):
        if l2 > 0.15: pros.append(f"L2-imb {l2:+.2f} ‚Äî –ø–µ—Ä–µ–≤–µ—Å –±–∏–¥–æ–≤")
        elif l2 < -0.15: cons.append(f"L2-imb {l2:+.2f} ‚Äî –ø–µ—Ä–µ–≤–µ—Å –∞—Å–∫–æ–≤")
        else: cons.append(f"L2-imb {l2:+.2f} ‚Äî —Å–ª–∞–±–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞")
    basis = details.get("basis")
    if isinstance(basis, (int, float)):
        if basis > 0.004: cons.append(f"basis {basis*100:+.2f}% ‚Äî —Ä–∏—Å–∫ —à–æ—Ä—Ç-—Å–∫–≤–∏–∑–∞")
        elif basis < -0.004: cons.append(f"basis {basis*100:+.2f}% ‚Äî —Ä–∏—Å–∫ –ª–æ–Ω–≥-—Å–∫–≤–∏–∑–∞")
    bdom = details.get("btc_dom_trend")
    if bdom == "down": pros.append("BTC.D down ‚Äî —Ñ–æ–Ω –∑–∞ –∞–ª—å—Ç—ã")
    elif bdom == "up": cons.append("BTC.D up ‚Äî —Ä–∏—Å–∫ –¥–ª—è –∞–ª—å—Ç–æ–≤")
    nb = details.get("news_boost")
    if isinstance(nb, (int, float)):
        if nb >= 1.0: pros.append(f"–ù–æ–≤–æ—Å—Ç–∏ +{nb:.2f} ‚Äî —Å–∏–ª—å–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞")
        elif nb >= 0.4: pros.append(f"–ù–æ–≤–æ—Å—Ç–∏ +{nb:.2f} ‚Äî —É–º–µ—Ä–µ–Ω–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞")
    br = details.get("score_breakdown") or {}
    if isinstance(br, dict):
        if br.get("sanityRR", 0.0) < 0: cons.append("sanityRR < 0 ‚Äî –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞ TP/SL –ø–ª–æ—Ö–∞—è")
        if br.get("microRR1", 0.0) < 0: cons.append("microRR1 < –ø–æ—Ä–æ–≥–∞ ‚Äî —Å–ª–∞–±—ã–π TP1")
    pros = [x for x in pros if x][:6]
    cons = [x for x in cons if x][:6]
    return pros, cons

def _mk_detail_sections_fancy(app: Dict[str, Any], symbol: str, side: str, details: Dict[str, Any], side_score: Optional[float]) -> Tuple[str, str]:
    fm = lambda x: _fmt_price(app, x)
    base = symbol.split("/")[0]
    p_bayes = details.get("p_bayes")
    risk_level = details.get("risk_level")
    lev = details.get("leverage")
    window_txt = "–û–∫–Ω–æ —Å–¥–µ–ª–∫–∏: ~40–º‚Äì6—á"

    header = f"üîé <b>{base}</b> ‚Äî —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Ç–µ—Ö–∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –æ–±–∑–æ—Ä"
    sub = f"–°—Ç–æ—Ä–æ–Ω–∞: <b>{side}</b>"
    if isinstance(p_bayes, (int, float)):
        sub += f" ‚Ä¢ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: <b>{p_bayes:.2f}</b>"
    elif isinstance(side_score, (int, float)):
        sub += f" ‚Ä¢ –û—Ü–µ–Ω–∫–∞: <b>{side_score:.2f}</b>"
    sub += f" ‚Ä¢ –†–∏—Å–∫-L: <b>{risk_level}/10</b> ‚Ä¢ –ü–ª–µ—á–æ: <b>{lev}x</b>\n‚ÑπÔ∏è –≠—Ç–æ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –æ–±–∑–æ—Ä, –Ω–µ —Ç–æ—Ä–≥–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª."

    pros, cons = _make_pros_cons(details)
    # –í—ã–≤–æ–¥
    adx = _safe_float(details.get("adx15"))
    rvol = details.get("rvol_combo")
    macd_pos = (details.get("macdh5") or 0) > 0
    concl = []
    if (details.get("cond4h_up") and details.get("cond1h_up") and details.get("cond15_up")) or (adx >= 25 and macd_pos):
        concl.append("–∏–¥–µ—è –ª–æ–Ω–≥–∞ –∂–∏–∑–Ω–µ—Å–ø–æ—Å–æ–±–Ω–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –æ–±—ä—ë–º–æ–º –∏ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–µ —Å—Ç–æ–ø–∞")
    else:
        concl.append("–∏–¥–µ—è —Ç—Ä–µ–±—É–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è (–º–æ–º–µ–Ω—Ç—É–º/–æ–±—ä—ë–º—ã) –∏ –∞–∫–∫—É—Ä–∞—Ç–Ω–æ–≥–æ —Ä–∏—Å–∫‚Äë–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–∞")
    if isinstance(rvol, (int, float)) and rvol < 1.0:
        concl.append("–∂–µ–ª–∞—Ç–µ–ª–µ–Ω —Ä–æ—Å—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: RVOL ‚â• 1.2‚Äì1.5")
    conclusion = "–í—ã–≤–æ–¥: " + "; ".join(concl) + "."

    # Dashboard
    t4h = "‚Üë" if details.get("cond4h_up") else "‚Üì"
    t1h = "‚Üë" if details.get("cond1h_up") else "‚Üì"
    t15 = "‚Üë" if details.get("cond15_up") else "‚Üì"
    st = "‚Üë" if (details.get("st_dir") or 0) > 0 else ("‚Üì" if (details.get("st_dir") or 0) < 0 else "‚Ä¢")
    adx_txt = f"{_safe_float(details.get('adx15')):.0f}"
    r2_txt = f"{_safe_float(details.get('r2_1h')):.2f}"
    atr = _safe_float(details.get("atr"))
    atr_pct = _safe_float(details.get("atr_pct"))
    rsi5 = _safe_float(details.get("rsi5"))
    macd_txt = "+" if (details.get("macdh5") or 0) > 0 else "-"
    vol_z = details.get("vol_z")
    rvol_txt = details.get("rvol_combo")
    cvd = details.get("cvd_slope")
    ob_imb = details.get("ob_imb")
    basis = details.get("basis")
    bdom = details.get("btc_dom_trend")
    news_boost = details.get("news_boost")

    dash_lines = [
        "üìä <b>–ü—É–ª—å—Å</b>",
        f"‚Ä¢ MTF: 4h {t4h} ‚Ä¢ 1h {t1h} ‚Ä¢ 15m {t15}",
        f"‚Ä¢ ST: {st} ‚Ä¢ ADX: {adx_txt} ‚Ä¢ R2(1h): {r2_txt}",
        f"‚Ä¢ ATR(15m): {atr:.4f} ({atr_pct:.2f}%)",
        f"‚Ä¢ RSI(5m): {rsi5:.0f} ‚Ä¢ MACD: {macd_txt}",
    ]
    flows = []
    if isinstance(vol_z, (int, float)): flows.append(f"vol_z {vol_z:.2f}")
    if isinstance(rvol_txt, (int, float)): flows.append(f"RVOL x{rvol_txt:.2f}")
    if isinstance(cvd, (int, float)): flows.append(f"CVD {cvd:+.0f}")
    if isinstance(ob_imb, (int, float)): flows.append(f"L2-imb {ob_imb:+.2f}")
    if isinstance(basis, (int, float)): flows.append(f"basis {basis*100:+.2f}%")
    if isinstance(news_boost, (int, float)): flows.append(f"News +{news_boost:.2f}")
    if bdom: flows.append(f"BTC.D {bdom}")
    if flows:
        dash_lines.append("‚Ä¢ " + " ‚Ä¢ ".join(flows))

    # –£—Ä–æ–≤–Ω–∏
    lvl_lines = []
    pdh = details.get("PDH"); pdl = details.get("PDL")
    poc = details.get("poc"); vah = details.get("vah"); val = details.get("val")
    round_level = details.get("round_level")
    ib_hi = details.get("ib_hi"); ib_lo = details.get("ib_lo")
    if pdh: lvl_lines.append(f"PDH {fm(pdh)}")
    if pdl: lvl_lines.append(f"PDL {fm(pdl)}")
    if ib_hi and ib_lo: lvl_lines.append(f"IB {fm(ib_hi)}/{fm(ib_lo)}")
    if poc is not None and vah is not None and val is not None:
        lvl_lines.append(f"POC {fm(poc)}, VAH {fm(vah)}, VAL {fm(val)}")
    if round_level: lvl_lines.append(f"Round {fm(round_level)}")
    lvl_txt = ("‚Ä¢ " + " ‚Ä¢ ".join(lvl_lines)) if lvl_lines else "‚Ä¢ n/a"

    # Part 1
    part1 = "\n".join([
        f"{header}",
        "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ",
        sub,
        "",
        "‚ú® <b>–ö—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ</b>",
        ("–ó–∞:\n" + "\n".join([f"‚Ä¢ ‚úÖ {s}" for s in pros])) if pros else "",
        ("–ü—Ä–æ—Ç–∏–≤:\n" + "\n".join([f"‚Ä¢ ‚ùå {s}" for s in cons])) if cons else "",
        conclusion,
        "",
        *dash_lines,
        "",
        "üó∫ <b>–£—Ä–æ–≤–Ω–∏ / –ø—Ä–æ—Ñ–∏–ª—å</b>",
        lvl_txt,
        "",
        window_txt,
    ])[:3500]

    # Part 2 ‚Äî —Ä–∏—Å–∫/—Å—Ü–µ–Ω–∞—Ä–∏–∏
    entry = _safe_float(details.get("c5"))
    sl = _safe_float(details.get("sl"))
    tps = [float(x) for x in (details.get("tps") or [])]
    risk_pct = abs(entry - sl) / (entry + 1e-9) * 100.0 if (entry and sl) else 0.0
    rr1 = details.get("rr1"); rr2 = details.get("rr2")

    alt_mult = 1.2
    atr = _safe_float(details.get("atr"))
    alt_stop_usd = alt_mult * atr
    alt_stop_pct = (alt_stop_usd / (entry + 1e-9)) * 100.0 if entry else 0.0
    R1, R2, R3 = 1.0, 1.75, 2.5
    if side == "LONG":
        tp1_p, tp2_p, tp3_p = entry + R1*alt_stop_usd, entry + R2*alt_stop_usd, entry + R3*alt_stop_usd
    else:
        tp1_p, tp2_p, tp3_p = entry - R1*alt_stop_usd, entry - R2*alt_stop_usd, entry - R3*alt_stop_usd

    scen = [
        "A) –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —Ç—Ä–µ–Ω–¥–∞ (breakout/continuation)",
        "‚Ä¢ –¢—Ä–∏–≥–≥–µ—Ä—ã: 15m –∑–∞–∫—Ä—ã—Ç–∏–µ –≤—ã—à–µ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ö–∞—è –ø—Ä–∏ RVOL ‚â• 1.2‚Äì1.5, —Ä–æ—Å—Ç CVD; L2-imb –Ω–µ —É—Ö–æ–¥–∏—Ç –≤ –º–∏–Ω—É—Å.",
        "‚Ä¢ –í—Ö–æ–¥: –Ω–∞ —Ä–µ—Ç–µ—Å—Ç–µ –ø—Ä–æ–±–∏—Ç–æ–≥–æ —É—Ä–æ–≤–Ω—è –∏–ª–∏ –ø–æ—Å–ª–µ –º–∏–∫—Ä–æ‚Äë–∫–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏–∏ –Ω–∞–¥ –Ω–∏–º.",
        f"‚Ä¢ –°—Ç–æ–ø: 1.0‚Äì1.5√óATR ({atr:.4f} ‚áí {atr*1.0:.4f}‚Äì{atr*1.5:.4f}). –¶–µ–ª–∏: +1R / +1.75R / +2.5R. –ü–ª–µ—á–æ: 3‚Äì6x (–∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω–æ).",
        "B) –û—Ç–∫–∞—Ç –∫ –ø–æ–¥–¥–µ—Ä–∂–∫–µ (buy the dip –ø–æ —Ç—Ä–µ–Ω–¥—É)",
        "‚Ä¢ –¢—Ä–∏–≥–≥–µ—Ä—ã: –æ—Ç–∫–∞—Ç –∫ 15m EMA50/–∑–æ–Ω–µ –±–∞–ª–∞–Ω—Å–∞ –ø—Ä–∏ —É–¥–µ—Ä–∂–∞–Ω–∏–∏ 1h > EMA200; —Å–≤–µ—á–Ω–æ–π —Ä–µ‚Äë–∫–ª–µ–π–º —É—Ä–æ–≤–Ω—è; —Ä–æ—Å—Ç CVD.",
        "‚Ä¢ –í—Ö–æ–¥: –Ω–∞–¥ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–º —É—Ä–æ–≤–Ω–µ–º, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–±—ä—ë–º–æ–º (RVOL).",
        "‚Ä¢ –°—Ç–æ–ø: –∑–∞ —Å–≤–∏–Ω–≥‚Äë–ª–æ—É –æ—Ç–∫–∞—Ç–∞ –∏–ª–∏ 1.2‚Äì1.5√óATR. –¶–µ–ª–∏: –∫ –ª–æ–∫–∞–ª—å–Ω–æ–º—É –º–∞–∫—Å–∏–º—É–º—É –¥–Ω—è, –∑–∞—Ç–µ–º –∫ –ø–∏–≤–æ—Ç–∞–º (R1/R2).",
    ]
    inv = [
        "‚Ä¢ 15m –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–¥ 1h EMA200 –∏–ª–∏ –ø–µ—Ä–µ–ª–æ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—ã (LL/LH).",
        "‚Ä¢ –°—Ä—ã–≤ CVD –≤–Ω–∏–∑ –ø—Ä–∏ —Ä–æ—Å—Ç–µ RVOL (–∞–≥—Ä–µ—Å—Å–∏—è –ø—Ä–æ–¥–∞–≤—Ü–∞).",
        "‚Ä¢ –†–µ–∑–∫–∏–π —Ä–æ—Å—Ç BTC.D –ø—Ä–∏ –ø–∞–¥–∞—é—â–∏—Ö –æ–±—ä—ë–º–∞—Ö –ø–æ –∞–∫—Ç–∏–≤—É.",
    ]
    mgmt = [
        "‚Ä¢ –†–∏—Å–∫ –Ω–∞ —Å–¥–µ–ª–∫—É: 0.5‚Äì1.0% –æ—Ç –¥–µ–ø–æ–∑–∏—Ç–∞.",
        "‚Ä¢ –ü–µ—Ä–µ–Ω–æ—Å –≤ –ë–£: –ø–æ—Å–ª–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è +1.0R.",
        "‚Ä¢ –ß–∞—Å—Ç–∏—á–Ω–∞—è —Ñ–∏–∫—Å–∞—Ü–∏—è: 30‚Äì40% –Ω–∞ TP1, 30‚Äì40% –Ω–∞ TP2, –æ—Å—Ç–∞—Ç–æ–∫ ‚Äî —Ç—Ä–µ–π–ª–∏–Ω–≥ 1.0‚Äì1.5√óATR.",
        "‚Ä¢ –í—Ä–µ–º–µ–Ω–Ω–æ–π —Å—Ç–æ–ø: –µ—Å–ª–∏ –∑–∞ 40–º‚Äì6—á –Ω–µ—Ç ‚â•0.8√óATR –≤ –≤–∞—à—É —Å—Ç–æ—Ä–æ–Ω—É –∏ RVOL –Ω–µ —Ä–∞—Å—Ç—ë—Ç ‚Äî –ø–µ—Ä–µ–æ—Ü–µ–Ω–∏—Ç—å/–ø–µ—Ä–µ–∑–∞–π—Ç–∏.",
    ]
    chk = [
        "‚Ä¢ RVOL ‚â• 1.2 –Ω–∞ —Å–∏–≥–Ω–∞–ª—å–Ω–æ–π —Å–≤–µ—á–µ/–ø—Ä–æ–±–æ–µ.",
        "‚Ä¢ CVD —Ä–∞—Å—Ç—ë—Ç; –Ω–µ—Ç –Ω–∞–ª—ë—Ç–∞ –ø—Ä–æ–¥–∞–≤—Ü–∞.",
        "‚Ä¢ L2-imb ‚â• 0 –∏ –Ω–µ —É—Ö—É–¥—à–∞–µ—Ç—Å—è –Ω–∞ –ø—Ä–æ–±–æ–µ.",
        "‚Ä¢ 4h/1h –æ—Å—Ç–∞—é—Ç—Å—è > EMA200; 15m —É–¥–µ—Ä–∂–∏–≤–∞–µ—Ç EMA50.",
        "‚Ä¢ –°—Ç–æ–ø ‚â§ 1.5√óATR –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –≤–∞—à–µ–º—É Risk%.",
        ("‚Ä¢ –§–æ–Ω –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–π ‚Äî —É—á–∏—Ç—ã–≤–∞–π—Ç–µ —É—Å–∫–æ—Ä–µ–Ω–∏—è/–≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å." if isinstance(details.get("news_boost"), (int, float)) and details["news_boost"] >= 1.0 else "‚Ä¢ –ù–µ—Ç –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π (News)."),
    ]
    cmt = []
    br = details.get("score_breakdown") or {}
    if br.get("HistoryNN", 0) > 0 or details.get("nn_edge"):
        cmt.append(f"‚Ä¢ HistoryNN {details.get('nn_edge', 0):+,.2f}% ‚Äî –ª—ë–≥–∫–∞—è –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞.")
    if details.get("nn_edge_dtw"):
        cmt.append(f"‚Ä¢ DTW {details.get('nn_edge_dtw', 0):+,.2f}% ‚Äî –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω –¥–≤–∏–∂–µ–Ω–∏—è.")
    if isinstance(basis, (int, float)) and abs(basis) < 0.001:
        cmt.append("‚Ä¢ basis ~0% ‚Äî –Ω–µ—Ç –ø–µ—Ä–µ–≥—Ä–µ–≤–∞ –¥–µ—Ä–∏–≤–∞—Ç–∏–≤–æ–≤.")
    if br.get("sanityRR", 0) < 0 or br.get("microRR1", 0) < 0:
        cmt.append("‚Ä¢ sanityRR/microRR: –ø–µ—Ä–µ—Å–æ–±–µ—Ä–∏—Ç–µ TP/SL –ø–æ–¥ ATR/R (—Å–º. –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—É –Ω–∏–∂–µ).")

    lev_warn = ""
    lev_val = int(details.get("leverage") or 0)
    if lev_val >= 10 and risk_pct > 3.0:
        lev_warn = "‚ö†Ô∏è –ü—Ä–∏ –ø–ª–µ—á–µ ‚â•10x –≥–ª—É–±–æ–∫–∏–π —Å—Ç–æ–ø –º–æ–∂–µ—Ç –Ω–µ –¥–æ–∂–∏—Ç—å –¥–æ SL (–ª–∏–∫–≤–∏–¥–∞—Ü–∏—è —Ä–∞–Ω—å—à–µ) ‚Äî –¥–µ—Ä–∂–∏—Ç–µ —Å—Ç–æ–ø ‚â§ 1.5√óATR."

    now_math = []
    if entry:
        now_math.append(f"‚Ä¢ TBX: {fm(entry)} ‚Ä¢ SL: {fm(sl)} ({risk_pct:.2f}% –æ—Ç –≤—Ö–æ–¥–∞)")
    if tps:
        tparts = [f"TP{i} {fm(tp)} ({_pct_of_entry(side, entry, tp):.2f}%)" for i, tp in enumerate(tps[:3], 1)]
        now_math.append("‚Ä¢ " + " ‚Ä¢ ".join(tparts))
    if isinstance(rr1, (int, float)) or isinstance(rr2, (int, float)):
        now_math.append(f"‚Ä¢ microRR: RR1 {rr1 if rr1 is not None else 0:.2f} ‚Ä¢ RR2 {rr2 if rr2 is not None else 0:.2f}")
    if lev_warn:
        now_math.append(lev_warn)

    alt = [
        "–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ (–ø–æ ATR/R):",
        f"‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π —Å—Ç–æ–ø: <b>{alt_mult:.1f}√óATR</b> ‚âà {alt_stop_usd:.4f}$ (~{alt_stop_pct:.2f}%)",
        f"‚Ä¢ –¶–µ–ª–∏: 1.0R ‚Üí {fm(tp1_p)} ({_pct_of_entry(side, entry, tp1_p):.2f}%), 1.75R ‚Üí {fm(tp2_p)} ({_pct_of_entry(side, entry, tp2_p):.2f}%), 2.5R ‚Üí {fm(tp3_p)} ({_pct_of_entry(side, entry, tp3_p):.2f}%)",
    ]

    part2 = "\n".join([
        f"üß≠ <b>–†–∏—Å–∫‚Äë–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç –∏ —Å—Ü–µ–Ω–∞—Ä–∏–∏ ‚Ä¢ {base}</b>",
        "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ",
        "–¢–µ–∫—É—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:" if now_math else "",
        *now_math,
        "",
        *alt,
        "",
        "–°—Ü–µ–Ω–∞—Ä–∏–∏ –æ—Ç—Ä–∞–±–æ—Ç–∫–∏:",
        *[("‚Ä¢ " + s if not s.startswith(("A)", "B)")) else s) for s in scen],
        "",
        "–ò–Ω–≤–∞–ª–∏–¥–∞—Ü–∏—è –∏–¥–µ–∏:",
        *inv,
        "",
        "–ú–µ–Ω–µ–¥–∂–º–µ–Ω—Ç –ø–æ–∑–∏—Ü–∏–∏:",
        *mgmt,
        "",
        "–ß–µ–∫‚Äë–ª–∏—Å—Ç –ø–µ—Ä–µ–¥ –≤—Ö–æ–¥–æ–º:",
        *chk,
        "",
        "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ –º–µ—Ç—Ä–∏–∫–∞–º:" if cmt else "",
        *cmt[:6],
        "",
        "‚ö†Ô∏è –ü–æ–º–Ω–∏—Ç–µ: —ç—Ç–æ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞, –∞ –Ω–µ —Ç–æ—Ä–≥–æ–≤–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è.",
    ])[:3500]

    return part1, part2

async def _send_admin_user_overview(app: Dict[str, Any], admin_id: int, bot=None):
    logger = app.get("logger")
    db = app.get("db")
    bot = bot or app.get("bot_instance")
    if not db or not getattr(db, "conn", None) or not bot:
        return
    with contextlib.suppress(Exception):
        await db.conn.execute("ALTER TABLE users ADD COLUMN last_seen TEXT")
        await db.conn.commit()
    now = _now_utc()
    cutoff_now = (now - timedelta(seconds=NEON_SESSION_TIMEOUT_SEC)).isoformat()
    cutoff_24h = (now - timedelta(hours=24)).isoformat()

    try:
        cur = await db.conn.execute("SELECT user_id FROM users WHERE last_seen IS NOT NULL AND last_seen >= ? ORDER BY last_seen DESC", (cutoff_now,))
        rows_now = await cur.fetchall()
        ids_now = [int(r["user_id"]) for r in rows_now] if rows_now else []
    except Exception:
        ids_now = []
    try:
        cur = await db.conn.execute("SELECT user_id FROM users WHERE last_seen IS NOT NULL AND last_seen >= ? ORDER BY last_seen DESC", (cutoff_24h,))
        rows_24 = await cur.fetchall()
        ids_24 = [int(r["user_id"]) for r in rows_24] if rows_24 else []
    except Exception:
        ids_24 = []

    async def _names(id_list: List[int]) -> List[str]:
        out = []
        for uid in id_list[:NEON_MAX_LIST_SHOW]:
            try:
                ch = await bot.get_chat(uid)
                out.append(_user_display_name(app, ch))
            except Exception:
                out.append(f"id {uid}")
        return out

    names_now = await _names(ids_now)
    names_24 = await _names(ids_24)
    more_now = max(0, len(ids_now) - len(names_now))
    more_24 = max(0, len(ids_24) - len(names_24))

    msg1 = "\n".join([
        "üë• –ê–∫—Ç–∏–≤–Ω—ã —Å–µ–π—á–∞—Å (‚â§ 15 –º–∏–Ω): " + str(len(ids_now)),
        "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ",
        *([f"‚Ä¢ {nm}" for nm in names_now] if names_now else ["‚Ä¢ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ–π—á–∞—Å"]),
        *(["‚Ä¶ –∏ –µ—â—ë " + str(more_now)] if more_now > 0 else []),
    ])
    msg2 = "\n".join([
        "üìÖ –ó–∞ 24 —á–∞—Å–∞: " + str(len(ids_24)),
        "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ",
        *([f"‚Ä¢ {nm}" for nm in names_24] if names_24 else ["‚Ä¢ –Ω–µ –±—ã–ª–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"]),
        *(["‚Ä¶ –∏ –µ—â—ë " + str(more_24)] if more_24 > 0 else []),
    ])
    with contextlib.suppress(Exception):
        await bot.send_message(admin_id, msg1)
    with contextlib.suppress(Exception):
        await bot.send_message(admin_id, msg2)

async def _touch_session_and_maybe_notify(app: Dict[str, Any], user: Any) -> None:
    import time as _time
    user_id = int(getattr(user, "id", 0) or 0)
    if user_id <= 0:
        return
    await _ensure_user_row_and_touch(app, user_id)

    ts_now = _time.time()
    st = _SESSIONS.get(user_id, {"last": 0.0, "notified": 0.0})
    inactive = (ts_now - st.get("last", 0.0)) >= NEON_SESSION_TIMEOUT_SEC
    st["last"] = ts_now
    _SESSIONS[user_id] = st

    # ¬´–æ–¥–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–∞ —Å–µ—Å—Å–∏—é¬ª + –∞–Ω—Ç–∏—Å–ø–∞–º –∫—É–ª–¥–∞—É–Ω
    if inactive and (ts_now - st.get("notified", 0.0) >= NEON_NOTIFY_COOLDOWN_SEC):
        bot = app.get("bot_instance")
        db = app.get("db")
        logger = app.get("logger")
        if not bot or not db:
            return
        try:
            admins = await db.get_admin_user_ids()
        except Exception:
            admins = []
        if not admins:
            return
        name = _user_display_name(app, user)
        text = f"–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {name} –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –±–æ—Ç–µ"
        for aid in admins:
            with contextlib.suppress(Exception):
                await bot.send_message(aid, text)
        st["notified"] = ts_now
        _SESSIONS[user_id] = st
        logger and logger.info("NEON: session start notify sent for user_id=%s", user_id)

# ===================== ANALYSIS (ONLY ANALYSIS) =====================
async def _analysis_only_flow(app: Dict[str, Any], message: Message, bot, user_id: int, symbol: str):
    logger = app.get("logger")
    EXECUTOR = app.get("EXECUTOR")
    build_reason_fn = app.get("build_reason")

    st_guard = await app.get("guard_access")(message, bot)
    if not st_guard:
        return

    ok, used, limit = await _analysis_allowed_and_inc(app, user_id, st_guard)
    if not ok:
        with contextlib.suppress(Exception):
            await message.answer(f"‚õî –õ–∏–º–∏—Ç –∞–Ω–∞–ª–∏–∑–∞ –∏—Å—á–µ—Ä–ø–∞–Ω: {limit}/–¥–µ–Ω—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≤—Ç—Ä–∞ –∏–ª–∏ –ø–æ–ª—É—á–∏—Ç–µ —Å–∏–≥–Ω–∞–ª: /signal")
        return

    base = symbol.split("/")[0]
    with contextlib.suppress(Exception):
        await message.answer(f"‚è≥ –î–µ–ª–∞—é –∞–Ω–∞–ª–∏–∑ {base}‚Ä¶")

    loop = asyncio.get_running_loop()
    side = None
    side_score = None
    details: Dict[str, Any] = {}
    try:
        score_symbol_core = app.get("score_symbol_core")
        res = await loop.run_in_executor(EXECUTOR, score_symbol_core, symbol, False)
        if res is None:
            res = await loop.run_in_executor(EXECUTOR, score_symbol_core, symbol, True)
        if res is not None:
            side_score, side, details = res
            details = dict(details or {})
        else:
            score_symbol_quick = app.get("score_symbol_quick")
            quick = score_symbol_quick(symbol)
            if quick:
                side, details = quick
                side_score = float(details.get("score", 0.9))
                details = dict(details or {})
            else:
                raise RuntimeError("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.")
    except Exception as e:
        logger and logger.exception("NEON analysis failed for %s: %s", symbol, e)
        with contextlib.suppress(Exception):
            await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∞–ª–∏–∑. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    details["symbol"] = symbol
    header = _format_brief_header(details, base, side_score)
    try:
        reason = build_reason_fn(details) if callable(build_reason_fn) else ""
    except Exception:
        reason = ""
    tail = "\n\n‚ÑπÔ∏è –≠—Ç–æ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –æ–±–∑–æ—Ä, –Ω–µ —Ç–æ—Ä–≥–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª."
    text = f"{header}\n{reason}{tail}"

    cb_data = f"neon:detail:{symbol.replace('/', '_')}"
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üî¨ –°–¥–µ–ª–∞—Ç—å –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω—ã–π –∞–Ω–∞–ª–∏–∑", callback_data=cb_data)]
    ])
    with contextlib.suppress(Exception):
        await message.answer(text, reply_markup=kb)

# ===================== INTERNAL DETAIL HANDLER =====================
async def _handle_neon_detail(app: Dict[str, Any], cb: CallbackQuery):
    logger = app.get("logger")
    with contextlib.suppress(Exception):
        await cb.answer("–ì–æ—Ç–æ–≤–ª—é –ø–æ–¥—Ä–æ–±–Ω—ã–π –∞–Ω–∞–ª–∏–∑‚Ä¶")
    sym_enc = cb.data.split(":", 2)[-1]
    symbol = sym_enc.replace("_", "/")
    try:
        EXECUTOR = app.get("EXECUTOR")
        loop = asyncio.get_running_loop()
        score_symbol_core = app.get("score_symbol_core")
        res = await loop.run_in_executor(EXECUTOR, score_symbol_core, symbol, False)
        if res is None:
            res = await loop.run_in_executor(EXECUTOR, score_symbol_core, symbol, True)
        if res is None:
            with contextlib.suppress(Exception):
                await cb.message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –ø–æ–¥—Ä–æ–±–Ω—ã–π –∞–Ω–∞–ª–∏–∑. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return
        side_score, side, details = res
        details = dict(details or {})
        details["symbol"] = symbol
        part1, part2 = _mk_detail_sections_fancy(app, symbol, side, details, side_score)
        with contextlib.suppress(Exception):
            await cb.message.answer(part1)
        with contextlib.suppress(Exception):
            await cb.message.answer(part2)
        logger and logger.info("NEON: detail sent for %s", symbol)
    except Exception:
        logger and logger.exception("NEON: detail error")
        with contextlib.suppress(Exception):
            await cb.answer("–û—à–∏–±–∫–∞", show_alert=False)

# ===================== Middleware –¥–ª—è —Ç—Ä–µ–∫–∏–Ω–≥–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ =====================
class NeonSessionMiddleware(BaseMiddleware):
    def __init__(self, app: Dict[str, Any]):
        super().__init__()
        self.app = app

    async def __call__(self, handler, event, data):
        try:
            # Message in private
            m = event if isinstance(event, Message) else getattr(event, "message", None)
            if m and getattr(m.chat, "type", None) == "private" and m.from_user and not m.from_user.is_bot:
                await _touch_session_and_maybe_notify(self.app, m.from_user)
            # Callback in private
            if isinstance(event, CallbackQuery) and event.from_user and not event.from_user.is_bot:
                msg = event.message
                if msg and getattr(msg.chat, "type", None) == "private":
                    await _touch_session_and_maybe_notify(self.app, event.from_user)
        except Exception:
            pass
        return await handler(event, data)

# ===================== –ê–Ω—Ç–∏–¥—É–±–ª–∏ –¥–ª—è —É—Ç—Ä–µ–Ω–Ω–∏—Ö –ø–æ—Å—Ç–æ–≤ (once per day) =====================
def _install_daily_once_guards(app: Dict[str, Any]) -> None:
    import sys
    logger = app.get("logger")
    once = app.setdefault("_daily_once", {"lock": asyncio.Lock(), "sent": set()})

    def _day(app_):
        return app_["now_msk"]().date().isoformat()

    # main._post_morning_report(app, bot, channel_id) ‚Äî –∫–∞–Ω–∞–ª 08:00
    m = sys.modules.get("main")
    if m and hasattr(m, "_post_morning_report"):
        orig_morning = m._post_morning_report

        async def _post_morning_report_once(app_, bot, channel_id):
            key = ("channel", str(channel_id), _day(app_))
            async with once["lock"]:
                if key in once["sent"]:
                    logger and logger.info("Morning post: skipped (already sent today) channel=%s", channel_id)
                    return
            await orig_morning(app_, bot, channel_id)
            async with once["lock"]:
                once["sent"].add(key)

        m._post_morning_report = _post_morning_report_once
        logger and logger.info("NEON: guard applied to main._post_morning_report (once/day).")

    # main._post_admin_greetings(app, bot) ‚Äî —É—Ç—Ä–µ–Ω–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞–º (–µ—Å–ª–∏ –µ—Å—Ç—å)
    if m and hasattr(m, "_post_admin_greetings"):
        orig_admin = m._post_admin_greetings

        async def _post_admin_greetings_once(app_, bot):
            key = ("admin_daily", "all", _day(app_))
            async with once["lock"]:
                if key in once["sent"]:
                    logger and logger.info("Admin morning digest (main): skipped (once/day).")
                    return
            await orig_admin(app_, bot)
            async with once["lock"]:
                once["sent"].add(key)

        m._post_admin_greetings = _post_admin_greetings_once
        logger and logger.info("NEON: guard applied to main._post_admin_greetings (once/day).")

    # chat._post_admin_greetings_once(app, bot) ‚Äî –≤—Ç–æ—Ä–æ–π –∏—Å—Ç–æ—á–Ω–∏–∫ –¥—É–±–ª—è
    c = sys.modules.get("chat")
    if c and hasattr(c, "_post_admin_greetings_once"):
        orig_chat_admin_once = c._post_admin_greetings_once

        async def _chat_post_admin_greetings_once_guard(app_, bot):
            key = ("admin_daily", "all", _day(app_))
            async with once["lock"]:
                if key in once["sent"]:
                    logger and logger.info("Admin morning digest (chat): skipped (once/day).")
                    return
            await orig_chat_admin_once(app_, bot)
            async with once["lock"]:
                once["sent"].add(key)

        c._post_admin_greetings_once = _chat_post_admin_greetings_once_guard
        logger and logger.info("NEON: guard applied to chat._post_admin_greetings_once (once/day).")

# ===================== PATCH ENTRY =====================
def patch(app: Dict[str, Any]) -> None:
    logger = app.get("logger")
    router = app.get("router")
    logger and logger.info("NEON patch –ø–æ–¥–∫–ª—é—á—ë–Ω: —Å–µ—Å—Å–∏–∏/—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞–º + –∞–Ω–∞–ª–∏–∑-–¢–û–õ–¨–ö–û —Å –ª–∏–º–∏—Ç–æ–º –∏ ¬´–ü–æ–¥—Ä–æ–±–Ω–µ–µ¬ª (WOW-—Ñ–æ—Ä–º–∞—Ç) + —É—Ç—Ä–µ–Ω–Ω–∏–µ –∞–Ω—Ç–∏–¥—É–±–ª–∏.")

    # Middleware –¥–ª—è —Ç—Ä–µ–∫–∏–Ω–≥–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (–¥–æ –≤—Å–µ—Ö —Ö—ç–Ω–¥–ª–µ—Ä–æ–≤)
    router.message.middleware(NeonSessionMiddleware(app))
    router.callback_query.middleware(NeonSessionMiddleware(app))

    # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–Ω—Ç–∏–¥—É–±–ª–∏ –Ω–∞ —É—Ç—Ä–µ–Ω–Ω–∏–µ –ø–æ—Å—Ç—ã (–µ—Å–ª–∏ —Ñ—É–Ω–∫—Ü–∏–∏ —É–∂–µ –¥–æ—Å—Ç—É–ø–Ω—ã)
    _install_daily_once_guards(app)

    orig_on_startup = app.get("on_startup")
    async def _on_startup_neon(bot):
        app["bot_instance"] = bot
        db = app.get("db")
        if db and db.conn:
            with contextlib.suppress(Exception):
                await db.conn.execute("ALTER TABLE users ADD COLUMN last_seen TEXT")
                await db.conn.commit()
            await _ensure_analysis_columns(app)
        logger and logger.info("NEON: on_startup ‚Äî –º–æ–¥—É–ª—å –∞–∫—Ç–∏–≤–µ–Ω, –∫–æ–ª–æ–Ω–∫–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω—ã.")
        # –ù–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ main/chat –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –ø–æ–∑–∂–µ ‚Äî –ø–æ–≤—Ç–æ—Ä–Ω–æ –ø—Ä–∏–º–µ–Ω–∏–º guard
        with contextlib.suppress(Exception):
            _install_daily_once_guards(app)
        if orig_on_startup:
            await orig_on_startup(bot)
    app["on_startup"] = _on_startup_neon

    # –ü–∞—Ç—á /code ‚Äî –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ–±–∑–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –∞–ø–≥—Ä–µ–π–¥–∞
    try:
        obs = router.message
        handlers = getattr(obs, "handlers", [])
        target = None
        for h in handlers:
            cb = getattr(h, "callback", None)
            if getattr(cb, "__name__", "") == "cmd_code":
                target = h; break
        if target:
            orig_cmd_code = target.callback
            ADMIN_ACCESS_CODE = app.get("ADMIN_ACCESS_CODE", "2604")
            async def cmd_code_patched(message, command, bot):
                await orig_cmd_code(message, command, bot)
                args = (getattr(command, "args", None) or "").strip()
                if args == ADMIN_ACCESS_CODE:
                    with contextlib.suppress(Exception):
                        await _send_admin_user_overview(app, message.from_user.id, bot)
            setattr(target, "callback", cmd_code_patched)
            logger and logger.info("NEON: cmd_code patched ‚Äî –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ–±–∑–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ—Å–ª–µ –∞–ø–≥—Ä–µ–π–¥–∞.")
    except Exception as e:
        logger and logger.warning("NEON: cmd_code patch error: %s", e)

    # –ê–Ω–∞–ª–∏–∑ –º–æ–Ω–µ—Ç—ã ‚Äî fallback –ø–µ—Ä–µ—Ö–≤–∞—Ç
    try:
        obs = router.message
        handlers = getattr(obs, "handlers", [])
        target_fb = None
        for h in handlers:
            cb = getattr(h, "callback", None)
            if "fallback" in getattr(cb, "__name__", ""):
                target_fb = h; break
        if not target_fb:
            logger and logger.warning("NEON: fallback handler not found ‚Äî —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É—é –ø—Ä—è–º—ã–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã /coin –∏ –≤–≤–æ–¥–∞ —Ç–∏–∫–µ—Ä–∞.")
            async def _h_coin_cmd(message: Message):
                if getattr(message.chat, "type", None) != "private":
                    return
                txt = (message.text or "").strip()
                if not (txt.lower().startswith("/coin") or txt == "üîé –ê–Ω–∞–ª–∏–∑ –º–æ–Ω–µ—Ç—ã" or "–∞–Ω–∞–ª–∏–∑ –º–æ–Ω–µ—Ç—ã" in txt.lower()):
                    return
                st = await app.get("guard_access")(message, app.get("bot_instance"))
                if not st:
                    return
                parts = txt.split(maxsplit=1)
                if len(parts) > 1 and parts[0].lower().startswith("/coin"):
                    sym = _resolve_symbol_any(app, parts[1])
                    if not sym:
                        await message.answer("–ú–æ–Ω–µ—Ç–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞. –ü—Ä–∏–º–µ—Ä: BTC, ETH, SOL.")
                        return
                    await _analysis_only_flow(app, message, app.get("bot_instance"), message.from_user.id, sym)
                    return
                _NEON_COIN_PENDING.add(message.from_user.id)
                await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–Ω–µ—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, BTC –∏–ª–∏ ETH)")
            async def _h_coin_pending(message: Message):
                if getattr(message.chat, "type", None) != "private":
                    return
                uid = message.from_user.id if message.from_user else 0
                if uid in _NEON_COIN_PENDING and message.text and not message.text.startswith("/"):
                    st = await app.get("guard_access")(message, app.get("bot_instance"))
                    if not st:
                        return
                    sym = _resolve_symbol_any(app, message.text)
                    if not sym:
                        await message.answer("–ú–æ–Ω–µ—Ç–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞. –ü—Ä–∏–º–µ—Ä: BTC, ETH, SOL.")
                        return
                    _NEON_COIN_PENDING.discard(uid)
                    await _analysis_only_flow(app, message, app.get("bot_instance"), uid, sym)
            router.message.register(_h_coin_cmd, F.chat.type == "private")
            router.message.register(_h_coin_pending, F.chat.type == "private")
        else:
            orig_fallback = target_fb.callback
            async def fallback_neon(message: Message, bot):
                try:
                    uid = message.from_user.id if message.from_user else 0
                    text = (message.text or "").strip()
                    low = text.lower()
                    if getattr(message.chat, "type", None) == "private" and (text == "üîé –ê–Ω–∞–ª–∏–∑ –º–æ–Ω–µ—Ç—ã" or "–∞–Ω–∞–ª–∏–∑ –º–æ–Ω–µ—Ç—ã" in low or low.startswith("/coin")):
                        st = await app.get("guard_access")(message, bot)
                        if not st:
                            return
                        parts = text.split(maxsplit=1)
                        if len(parts) > 1 and parts[0].lower().startswith("/coin"):
                            sym = _resolve_symbol_any(app, parts[1])
                            if not sym:
                                await message.answer("–ú–æ–Ω–µ—Ç–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞. –ü—Ä–∏–º–µ—Ä: BTC, ETH, SOL.")
                                return
                            await _analysis_only_flow(app, message, bot, uid, sym)
                            return
                        _NEON_COIN_PENDING.add(uid)
                        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–Ω–µ—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, BTC –∏–ª–∏ ETH)")
                        return
                    if getattr(message.chat, "type", None) == "private" and uid in _NEON_COIN_PENDING and text and not text.startswith("/"):
                        st = await app.get("guard_access")(message, bot)
                        if not st:
                            return
                        sym = _resolve_symbol_any(app, text)
                        if not sym:
                            await message.answer("–ú–æ–Ω–µ—Ç–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞. –ü—Ä–∏–º–µ—Ä: BTC, ETH, SOL.")
                            return
                        _NEON_COIN_PENDING.discard(uid)
                        await _analysis_only_flow(app, message, bot, uid, sym)
                        return
                    await orig_fallback(message, bot)
                except Exception:
                    with contextlib.suppress(Exception):
                        await orig_fallback(message, bot)
            setattr(target_fb, "callback", fallback_neon)
            logger and logger.info("NEON: fallback –ø–µ—Ä–µ—Ö–≤–∞—á–µ–Ω ‚Äî —Ç–æ–ª—å–∫–æ –∞–Ω–∞–ª–∏–∑ —Å –ª–∏–º–∏—Ç–æ–º –∏ –∫–Ω–æ–ø–∫–æ–π ¬´–ü–æ–¥—Ä–æ–±–Ω–µ–µ¬ª.")
    except Exception as e:
        logger and logger.warning("NEON: fallback patch error: %s", e)

    # ‚ù∂ Handler –ø–æ–¥ neon:detail
    async def _h_detail(cb: CallbackQuery):
        if cb.data and cb.data.startswith("neon:detail:"):
            await _handle_neon_detail(app, cb)
    router.callback_query.register(_h_detail, F.data.startswith("neon:detail:"))
    logger and logger.info("NEON: direct callback handler for neon:detail registered.")

    # ‚ù∑ –û–±—ë—Ä—Ç–∫–∞ –æ–±—â–µ–≥–æ callback‚Äë—Ö–µ–Ω–¥–ª–µ—Ä–∞ –∏–∑ chat.py, —á—Ç–æ–±—ã –ø–µ—Ä–µ—Ö–≤–∞—Ç–∏—Ç—å neon:detail –ø–µ—Ä–≤–µ–µ
    try:
        obs = router.callback_query
        handlers = getattr(obs, "handlers", [])
        target_cb = None
        for h in handlers:
            cbf = getattr(h, "callback", None)
            if getattr(cbf, "__name__", "") == "_h_cb":  # –æ–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑ chat.py
                target_cb = h
                break
        if target_cb:
            orig_h_cb = target_cb.callback
            async def _h_cb_wrapped(cb: CallbackQuery):
                data = cb.data or ""
                if data.startswith("neon:detail:"):
                    await _handle_neon_detail(app, cb)
                    return
                return await orig_h_cb(cb)
            setattr(target_cb, "callback", _h_cb_wrapped)
            logger and logger.info("NEON: chat._h_cb wrapped to handle neon:detail first.")
        else:
            logger and logger.warning("NEON: chat._h_cb not found; rely on direct handler.")
    except Exception as e:
        logger and logger.warning("NEON: wrap chat._h_cb failed: %s", e)
